/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 04 16:42:19 GMT 2024
 */

package uk.ac.sheffield.com1003.cafe.ingredients;

import org.junit.Test;
import static org.junit.Assert.*;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Coffee_ESTest extends Coffee_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Coffee coffee0 = new Coffee(0, true);
      assertEquals(0, coffee0.getAmount());
      
      Coffee coffee1 = new Coffee(0, true);
      coffee0.amount = 1874;
      boolean boolean0 = coffee0.equalsSolution(coffee1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Coffee coffee0 = new Coffee(0, true);
      assertEquals(0, coffee0.getAmount());
      
      Coffee coffee1 = new Coffee(0, true);
      coffee0.amount = 1874;
      boolean boolean0 = coffee1.equals(coffee0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Coffee coffee0 = new Coffee();
      coffee0.name = null;
      // Undeclared exception!
      try { 
        coffee0.equalsSolution(coffee0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Coffee coffee0 = new Coffee();
      coffee0.name = null;
      // Undeclared exception!
      try { 
        coffee0.equals(coffee0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Coffee coffee0 = new Coffee(4162);
      Coffee coffee1 = new Coffee(4162, true);
      boolean boolean0 = coffee0.equalsSolution(coffee1);
      assertEquals(4162, coffee1.getAmount());
      assertFalse(boolean0);
      assertEquals("Coffee", coffee1.getName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Coffee coffee0 = new Coffee();
      coffee0.amount = 0;
      Coffee coffee1 = new Coffee(0);
      assertTrue(coffee1.equals((Object)coffee0));
      
      Unit unit0 = Unit.ML;
      coffee1.unit = unit0;
      boolean boolean0 = coffee0.equalsSolution(coffee1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Coffee coffee0 = new Coffee(0, true);
      assertEquals(0, coffee0.getAmount());
      
      Coffee coffee1 = new Coffee(0, true);
      coffee0.amount = 1874;
      boolean boolean0 = coffee1.equalsSolution(coffee0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Coffee coffee0 = new Coffee(1);
      Coffee coffee1 = new Coffee();
      assertEquals("Coffee", coffee1.getName());
      
      coffee1.name = "GR";
      boolean boolean0 = coffee1.equalsSolution(coffee0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Coffee coffee0 = new Coffee();
      boolean boolean0 = coffee0.equalsSolution(coffee0);
      assertEquals(8, coffee0.getAmount());
      assertEquals("Coffee", coffee0.getName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Coffee coffee0 = new Coffee();
      boolean boolean0 = coffee0.equalsSolution("GR");
      assertEquals(8, coffee0.getAmount());
      assertFalse(boolean0);
      assertEquals("Coffee", coffee0.getName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Coffee coffee0 = new Coffee(1550);
      boolean boolean0 = coffee0.equalsSolution((Object) null);
      assertFalse(boolean0);
      assertEquals(1550, coffee0.getAmount());
      assertEquals("Coffee", coffee0.getName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Coffee coffee0 = new Coffee(2016);
      Coffee coffee1 = new Coffee(2016, true);
      boolean boolean0 = coffee0.equals(coffee1);
      assertEquals(2016, coffee1.getAmount());
      assertFalse(boolean0);
      assertEquals("Coffee", coffee1.getName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Coffee coffee0 = new Coffee();
      Coffee coffee1 = new Coffee();
      assertTrue(coffee1.equals((Object)coffee0));
      
      Unit unit0 = Unit.UNDEFINED;
      coffee1.unit = unit0;
      boolean boolean0 = coffee0.equals(coffee1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Coffee coffee0 = new Coffee(0, true);
      assertEquals(0, coffee0.getAmount());
      
      Coffee coffee1 = new Coffee(0, true);
      coffee0.amount = 1874;
      boolean boolean0 = coffee0.equals(coffee1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Coffee coffee0 = new Coffee(2430);
      assertEquals("Coffee", coffee0.getName());
      
      coffee0.name = "bT\"(@'B4flDnaEZ=<d";
      Coffee coffee1 = new Coffee((-113), false);
      boolean boolean0 = coffee0.equals(coffee1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Coffee coffee0 = new Coffee();
      Object object0 = new Object();
      boolean boolean0 = coffee0.equals(object0);
      assertFalse(boolean0);
      assertEquals("Coffee", coffee0.getName());
      assertEquals(8, coffee0.getAmount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Coffee coffee0 = new Coffee();
      boolean boolean0 = coffee0.equals(coffee0);
      assertEquals("Coffee", coffee0.getName());
      assertEquals(8, coffee0.getAmount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Coffee coffee0 = new Coffee();
      boolean boolean0 = coffee0.equals((Object) null);
      assertEquals("Coffee", coffee0.getName());
      assertEquals(8, coffee0.getAmount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Coffee coffee0 = new Coffee();
      String string0 = coffee0.toString();
      assertEquals("Coffee", coffee0.getName());
      assertEquals("Coffee [unit=GR, amount=8, decaf=false]", string0);
  }
}
