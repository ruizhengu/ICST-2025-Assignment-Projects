/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 09 15:49:12 GMT 2024
 */

package uk.ac.sheffield.com1003.cafe;

import org.junit.Test;

import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.runner.RunWith;
import uk.ac.sheffield.com1003.cafe.Recipe;
import uk.ac.sheffield.com1003.cafe.ingredients.Coffee;
import uk.ac.sheffield.com1003.cafe.ingredients.Milk;
import uk.ac.sheffield.com1003.cafe.ingredients.Syrup;

public class Recipe_ESTest {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Recipe recipe0 = new Recipe("e@hZ3#vl$", (-343.488407));
        Recipe recipe1 = new Recipe("e@hZ3#vl$", 3140.735934601479);
        boolean boolean0 = recipe0.equals(recipe1);
        assertEquals(3140.735934601479, recipe1.getPrice(), 0.01);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        Recipe recipe0 = new Recipe((String) null, 0.0);
        double double0 = recipe0.getPrice();
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        Recipe recipe0 = new Recipe("", 1.0);
        double double0 = recipe0.getPrice();
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
        Recipe recipe0 = new Recipe("EFn(", 532.5835353, recipe_Size0, 1861);
        recipe0.getName();
        assertEquals(532.5835353, recipe0.getPrice(), 0.01);
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
        Recipe recipe0 = new Recipe("", 0, recipe_Size0, 0);
        recipe0.getName();
        assertTrue(recipe0.isReady());
        assertEquals(0.0, recipe0.getPrice(), 0.01);
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.SMALL;
        Recipe recipe0 = null;
        try {
            recipe0 = new Recipe((String) null, (-2), recipe_Size0, (-2));
            fail("Expecting exception: NegativeArraySizeException");

        } catch (NegativeArraySizeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("uk.ac.sheffield.com1003.cafe.Recipe", e);
        }
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
        Recipe recipe0 = new Recipe((String) null, (-2138.0264693874933), recipe_Size0, 0);
        boolean boolean0 = recipe0.isReady();
        assertTrue(boolean0);
        assertEquals((-2138.0264693874933), recipe0.getPrice(), 0.01);
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
        Recipe recipe0 = new Recipe((String) null, (-2138.0264693874933), recipe_Size0, 0);
        Recipe recipe1 = new Recipe((String) null, (-2138.0264693874933));
        boolean boolean0 = recipe0.equals(recipe1);
        assertEquals((-2138.0264693874933), recipe1.getPrice(), 0.01);
        assertTrue(recipe0.isReady());
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        Recipe recipe0 = new Recipe((String) null, 0.0);
        Recipe recipe1 = new Recipe((String) null, 0.0);
        assertFalse(recipe1.isReady());

        boolean boolean0 = recipe0.equals(recipe1);
        assertFalse(boolean0);
        assertEquals(0.0, recipe1.getPrice(), 0.01);
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
        Recipe recipe0 = new Recipe((String) null, (-2138.0264693874933), recipe_Size0, 0);
        Recipe.Size recipe_Size1 = Recipe.Size.LARGE;
        Recipe recipe1 = new Recipe("", (-2138.0264693874933), recipe_Size1, 0);
        boolean boolean0 = recipe0.equals(recipe1);
        assertFalse(boolean0);
        assertEquals((-2138.0264693874933), recipe1.getPrice(), 0.01);
        assertTrue(recipe1.isReady());
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
        Recipe recipe0 = new Recipe((String) null, (-2370.649), recipe_Size0, 0);
        Recipe recipe1 = new Recipe((String) null, (-298.64402665), recipe_Size0, 181);
        boolean boolean0 = recipe1.equals(recipe0);
        assertTrue(recipe0.isReady());
        assertEquals((-298.64402665), recipe1.getPrice(), 0.01);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
        Recipe recipe0 = new Recipe("u-,|%", 1.0, recipe_Size0, 0);
        boolean boolean0 = recipe0.equals("u-,|%");
        assertTrue(recipe0.isReady());
        assertFalse(boolean0);
        assertEquals(1.0, recipe0.getPrice(), 0.01);
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
        Recipe recipe0 = new Recipe((String) null, (-2138.0264693874933), recipe_Size0, 0);
        boolean boolean0 = recipe0.equals(recipe0);
        assertTrue(boolean0);
        assertEquals((-2138.0264693874933), recipe0.getPrice(), 0.01);
        assertTrue(recipe0.isReady());
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
        Recipe recipe0 = new Recipe((String) null, (-1.0), recipe_Size0, 1777);
        Coffee coffee0 = new Coffee();
        recipe0.addIngredient(coffee0);
        boolean boolean0 = recipe0.isReady();
        assertEquals((-1.0), recipe0.getPrice(), 0.01);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
        Recipe recipe0 = new Recipe((String) null, (-2138.0264693874933), recipe_Size0, 0);
        Recipe recipe1 = new Recipe("", (-2138.0264693874933), recipe_Size0, 0);
        boolean boolean0 = recipe0.equals(recipe1);
        assertEquals((-2138.0264693874933), recipe1.getPrice(), 0.01);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        Recipe recipe0 = new Recipe((String) null, 0.0);
        Syrup syrup0 = new Syrup();
        recipe0.addIngredient(syrup0);
        Milk milk0 = new Milk();
        recipe0.addIngredient(milk0);
        assertEquals(0.0, recipe0.getPrice(), 0.01);
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
        Recipe recipe0 = new Recipe((String) null, (-1.0), recipe_Size0, 1777);
        Coffee coffee0 = new Coffee();
        recipe0.addIngredient(coffee0);
        recipe0.addIngredient(coffee0);
        assertEquals((-1.0), recipe0.getPrice(), 0.01);
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
        Recipe recipe0 = new Recipe((String) null, (-2138.0264693874933), recipe_Size0, 0);
        Milk milk0 = new Milk(0);
        try {
            recipe0.addIngredient(milk0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("uk.ac.sheffield.com1003.cafe.Recipe", e);
        }
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
        Recipe recipe0 = new Recipe((String) null, (-2370.649), recipe_Size0, 0);
        double double0 = recipe0.getPrice();
        assertTrue(recipe0.isReady());
        assertEquals((-2370.649), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test19() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
        Recipe recipe0 = new Recipe((String) null, (-2138.0264693874933), recipe_Size0, 0);
        recipe0.hashCode();
        assertTrue(recipe0.isReady());
        assertEquals((-2138.0264693874933), recipe0.getPrice(), 0.01);
    }

    @Test(timeout = 4000)
    public void test20() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
        Recipe recipe0 = new Recipe((String) null, (-2138.0264693874933), recipe_Size0, 0);
        recipe0.getName();
        assertTrue(recipe0.isReady());
        assertEquals((-2138.0264693874933), recipe0.getPrice(), 0.01);
    }
}
