/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 04 16:39:01 GMT 2024
 */

package uk.ac.sheffield.com1003.cafe;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sheffield.com1003.cafe.ingredients.Coffee;
import uk.ac.sheffield.com1003.cafe.ingredients.Ingredient;
import uk.ac.sheffield.com1003.cafe.ingredients.Milk;
import uk.ac.sheffield.com1003.cafe.ingredients.Syrup;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Recipe_ESTest extends Recipe_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Recipe recipe0 = new Recipe((String) null, (-1246.39876454));
      Recipe recipe1 = new Recipe((String) null, (-1564.2));
      boolean boolean0 = recipe0.equalsSolution(recipe1);
      assertFalse(boolean0);
      assertEquals((-1564.2), recipe1.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.SMALL;
      Recipe recipe0 = new Recipe("uk.ac.sheffield.com1003.cafe.Recipe", 1.0, recipe_Size0, 3116);
      Recipe recipe1 = new Recipe("uk.ac.sheffield.com1003.cafe.Recipe", 1570.9956578135, recipe_Size0, 3116);
      boolean boolean0 = recipe0.equals(recipe1);
      assertFalse(boolean0);
      assertEquals(1570.9956578135, recipe1.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.SMALL;
      Recipe recipe0 = new Recipe("l,HYbwV]CWL5m", 983.66620463975, recipe_Size0, 1089);
      double double0 = recipe0.getPrice();
      assertEquals(983.66620463975, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Recipe recipe0 = new Recipe("", (-1605.40613));
      double double0 = recipe0.getPrice();
      assertEquals((-1605.40613), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.SMALL;
      Recipe recipe0 = new Recipe("NwA=6&=73{5^gX<", (-572.4712495245238), recipe_Size0, 813);
      recipe0.getName();
      assertEquals((-572.4712495245238), recipe0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Recipe recipe0 = new Recipe("", 0.0);
      recipe0.getName();
      assertEquals(0.0, recipe0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe0 = null;
      try {
        recipe0 = new Recipe("%c", (-13), recipe_Size0, (-13));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sheffield.com1003.cafe.Recipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Recipe recipe0 = new Recipe("", 0);
      Milk milk0 = new Milk();
      recipe0.addIngredient(milk0);
      recipe0.isReady();
      assertEquals(0.0, recipe0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.SMALL;
      Recipe recipe0 = new Recipe("]4ko", 0.0, recipe_Size0, 0);
      boolean boolean0 = recipe0.isReady();
      assertTrue(boolean0);
      assertEquals(0.0, recipe0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.SMALL;
      Recipe recipe0 = new Recipe("]4ko", 0.0, recipe_Size0, 0);
      Recipe recipe1 = new Recipe("]4ko", 0, recipe_Size0, 0);
      boolean boolean0 = recipe0.equalsSolution(recipe1);
      assertEquals(0.0, recipe1.getPrice(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.SMALL;
      Recipe recipe0 = new Recipe("]4ko", 0.0, recipe_Size0, 0);
      Recipe recipe1 = new Recipe("uk.ac.sheffield.com1003.cafe.Recipe", 0, recipe_Size0, 2288);
      boolean boolean0 = recipe0.equalsSolution(recipe1);
      assertFalse(boolean0);
      assertTrue(recipe0.isReady());
      assertEquals(0.0, recipe1.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Recipe recipe0 = new Recipe("", (-2066.3339651514));
      Recipe recipe1 = new Recipe("Syrup [unit=ML, amount=10, flavour=uk.ac.sheffield.com1003.cafe.Recipe$Size]", (-2066.3339651514));
      assertFalse(recipe1.isReady());
      
      boolean boolean0 = recipe0.equalsSolution(recipe1);
      assertFalse(boolean0);
      assertEquals((-2066.3339651514), recipe1.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Recipe recipe0 = new Recipe("", 0.0);
      Recipe.Size recipe_Size0 = Recipe.Size.SMALL;
      Recipe recipe1 = new Recipe("Coffee [unit=GR, amount=8, decaf=false]", 0.0, recipe_Size0, 0);
      boolean boolean0 = recipe0.equalsSolution(recipe1);
      assertTrue(recipe1.isReady());
      assertFalse(boolean0);
      assertEquals(0.0, recipe1.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Recipe recipe0 = new Recipe("", (-2066.3339651514));
      Recipe recipe1 = new Recipe("uk.ac.sheffield.com1003.cafe.Recipe$Size", 1385.108);
      boolean boolean0 = recipe0.equalsSolution(recipe1);
      assertFalse(boolean0);
      assertEquals(1385.108, recipe1.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe0 = new Recipe((String) null, 0.0, recipe_Size0, 3);
      boolean boolean0 = recipe0.equalsSolution((Object) null);
      assertFalse(boolean0);
      assertEquals(0.0, recipe0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe0 = new Recipe("],ko", 0.0, recipe_Size0, 0);
      boolean boolean0 = recipe0.equalsSolution(recipe0);
      assertTrue(recipe0.isReady());
      assertEquals(0.0, recipe0.getPrice(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
      Recipe recipe0 = new Recipe("%c", 0, recipe_Size0, 0);
      Recipe recipe1 = new Recipe("%c", 0, recipe_Size0, 0);
      boolean boolean0 = recipe0.equals(recipe1);
      assertEquals(0.0, recipe1.getPrice(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe0 = new Recipe("", 0, recipe_Size0, 1);
      assertFalse(recipe0.isReady());
      
      Recipe recipe1 = new Recipe("%1G51`camBqbpZ=", 0, recipe_Size0, 0);
      Milk.Type milk_Type0 = Milk.Type.WHOLE;
      Milk milk0 = new Milk((-1293), milk_Type0);
      recipe0.addIngredientSolution(milk0);
      boolean boolean0 = recipe1.equals(recipe0);
      assertTrue(recipe0.isReady());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Recipe recipe0 = new Recipe("]4ko", 0);
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe1 = new Recipe("", 0, recipe_Size0, 2);
      boolean boolean0 = recipe0.equals(recipe1);
      assertEquals(0.0, recipe1.getPrice(), 0.01);
      assertFalse(recipe1.isReady());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.SMALL;
      Recipe recipe0 = new Recipe("]4ko", 0.0, recipe_Size0, 0);
      Recipe recipe1 = new Recipe("]4ko", 0.0);
      boolean boolean0 = recipe0.equals(recipe1);
      assertFalse(boolean0);
      assertEquals(0.0, recipe1.getPrice(), 0.01);
      assertTrue(recipe0.isReady());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.SMALL;
      Recipe recipe0 = new Recipe("]4ko", 0.0, recipe_Size0, 0);
      Recipe recipe1 = new Recipe("]4ko", 205.459);
      boolean boolean0 = recipe1.equals(recipe0);
      assertTrue(recipe0.isReady());
      assertEquals(205.459, recipe1.getPrice(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe0 = new Recipe((String) null, 0.0, recipe_Size0, 3);
      boolean boolean0 = recipe0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0.0, recipe0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.SMALL;
      Recipe recipe0 = new Recipe("]4ko", 0.0, recipe_Size0, 0);
      boolean boolean0 = recipe0.equals(recipe0);
      assertTrue(boolean0);
      assertEquals(0.0, recipe0.getPrice(), 0.01);
      assertTrue(recipe0.isReady());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe0 = new Recipe("", 0, recipe_Size0, 1);
      Recipe recipe1 = new Recipe("%1G51`camBqbpZ=", 0, recipe_Size0, 0);
      boolean boolean0 = recipe1.equals(recipe0);
      assertFalse(recipe0.isReady());
      assertEquals(0.0, recipe1.getPrice(), 0.01);
      assertTrue(recipe1.isReady());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe0 = new Recipe("", 0, recipe_Size0, 1);
      assertFalse(recipe0.isReady());
      
      Recipe recipe1 = new Recipe("%1G51`camBqbpZ=", 0, recipe_Size0, 0);
      Milk.Type milk_Type0 = Milk.Type.WHOLE;
      Milk milk0 = new Milk((-1293), milk_Type0);
      recipe0.addIngredientSolution(milk0);
      boolean boolean0 = recipe0.equalsSolution(recipe1);
      assertTrue(recipe0.isReady());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe0 = new Recipe((String) null, 0.0, recipe_Size0, 3);
      Coffee coffee0 = new Coffee();
      recipe0.addIngredient(coffee0);
      Syrup syrup0 = new Syrup();
      recipe0.addIngredientSolution(syrup0);
      assertEquals(0.0, recipe0.getPrice(), 0.01);
      assertFalse(recipe0.isReady());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe0 = new Recipe((String) null, 0.0, recipe_Size0, 3);
      Coffee coffee0 = new Coffee();
      recipe0.addIngredient(coffee0);
      recipe0.addIngredientSolution(coffee0);
      assertEquals(0.0, recipe0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.SMALL;
      Recipe recipe0 = new Recipe("]4ko", 0.0, recipe_Size0, 0);
      Milk milk0 = new Milk();
      try { 
        recipe0.addIngredientSolution(milk0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sheffield.com1003.cafe.Recipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Recipe recipe0 = new Recipe("\"V)!`4l,g", 0.0);
      Milk milk0 = new Milk(33);
      recipe0.addIngredient(milk0);
      Milk.Type milk_Type0 = Milk.Type.SKIMMED;
      Milk milk1 = new Milk(33, milk_Type0);
      recipe0.addIngredient(milk1);
      assertFalse(recipe0.isReady());
      assertEquals(0.0, recipe0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe0 = new Recipe((String) null, 0.0, recipe_Size0, 3);
      Coffee coffee0 = new Coffee();
      recipe0.addIngredient(coffee0);
      recipe0.addIngredient(coffee0);
      assertEquals(0.0, recipe0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe0 = new Recipe(")afTxK*[rt", 1.0, recipe_Size0, 0);
      try { 
        recipe0.addIngredient((Ingredient) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sheffield.com1003.cafe.Recipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe0 = new Recipe((String) null, 0.0, recipe_Size0, 3);
      double double0 = recipe0.getPrice();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Recipe recipe0 = new Recipe("", (-2066.3339651514));
      recipe0.hashCode();
      assertEquals((-2066.3339651514), recipe0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe0 = new Recipe((String) null, 0.0, recipe_Size0, 3);
      recipe0.getName();
      assertEquals(0.0, recipe0.getPrice(), 0.01);
  }
}
