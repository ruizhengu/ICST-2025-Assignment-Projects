/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 09 14:55:01 GMT 2024
 */

package uk.ac.sheffield.com1003.cafe;

import org.junit.Test;

import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.runner.RunWith;
import uk.ac.sheffield.com1003.cafe.Recipe;
import uk.ac.sheffield.com1003.cafe.ingredients.Coffee;
import uk.ac.sheffield.com1003.cafe.ingredients.Milk;
import uk.ac.sheffield.com1003.cafe.ingredients.Water;

public class Recipe_ESTest {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Recipe recipe0 = new Recipe("", (-3083.022782125));
        Recipe recipe1 = new Recipe("", 0.0);
        boolean boolean0 = recipe0.equals(recipe1);
        assertFalse(boolean0);
        assertEquals(0.0, recipe1.getPrice(), 0.01);
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        Recipe recipe0 = new Recipe("Es8Dn2QAtnlO", 0.0);
        double double0 = recipe0.getPrice();
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        Recipe recipe0 = new Recipe("", (-3083.022782125));
        double double0 = recipe0.getPrice();
        assertEquals((-3083.022782125), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        Recipe recipe0 = new Recipe((String) null, 0.0);
        recipe0.getName();
        assertEquals(0.0, recipe0.getPrice(), 0.01);
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
        Recipe recipe0 = new Recipe("", 405.53809058, recipe_Size0, 591);
        recipe0.getName();
        assertEquals(405.53809058, recipe0.getPrice(), 0.01);
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.SMALL;
        Recipe recipe0 = null;
        try {
            recipe0 = new Recipe((String) null, (-465), recipe_Size0, (-465));
            fail("Expecting exception: NegativeArraySizeException");

        } catch (NegativeArraySizeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("uk.ac.sheffield.com1003.cafe.Recipe", e);
        }
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.SMALL;
        Recipe recipe0 = new Recipe("", 0.0, recipe_Size0, 0);
        boolean boolean0 = recipe0.isReady();
        assertEquals(0.0, recipe0.getPrice(), 0.01);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
        Recipe recipe0 = new Recipe((String) null, 3667.58, recipe_Size0, 1);
        Water water0 = new Water();
        recipe0.addIngredient(water0);
        Recipe recipe1 = new Recipe("Water [unit=ML, amount=30]", 3667.58, recipe_Size0, 1);
        boolean boolean0 = recipe0.equals(recipe1);
        assertFalse(recipe1.isReady());
        assertTrue(recipe0.isReady());
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        Recipe recipe0 = new Recipe("", 405.53809058);
        Recipe recipe1 = new Recipe(";`F^m4q#s:\"XqB_(8r", 405.53809058);
        assertFalse(recipe1.isReady());

        boolean boolean0 = recipe0.equals(recipe1);
        assertEquals(405.53809058, recipe1.getPrice(), 0.01);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.SMALL;
        Recipe recipe0 = new Recipe("", 1.0, recipe_Size0, 0);
        Recipe recipe1 = new Recipe(";`F^m4q#s:\"XqB_(8r", 1.0);
        boolean boolean0 = recipe0.equals(recipe1);
        assertFalse(boolean0);
        assertTrue(recipe0.isReady());
        assertEquals(1.0, recipe1.getPrice(), 0.01);
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
        Recipe recipe0 = new Recipe((String) null, 3667.58, recipe_Size0, 1);
        Recipe recipe1 = new Recipe("Water [unit=ML, amount=30]", (-3083.022782125));
        boolean boolean0 = recipe0.equals(recipe1);
        assertFalse(boolean0);
        assertEquals((-3083.022782125), recipe1.getPrice(), 0.01);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
        Recipe recipe0 = new Recipe("u[FUn", 1237.600838415792, recipe_Size0, 270);
        boolean boolean0 = recipe0.equals("Coffee [unit=GR, amount=8, decaf=false]");
        assertEquals(1237.600838415792, recipe0.getPrice(), 0.01);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.SMALL;
        Recipe recipe0 = new Recipe("w", (-41.99863816199774), recipe_Size0, 0);
        boolean boolean0 = recipe0.equals(recipe0);
        assertTrue(boolean0);
        assertEquals((-41.99863816199774), recipe0.getPrice(), 0.01);
        assertTrue(recipe0.isReady());
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        Recipe recipe0 = new Recipe("LARGE", (-1201.1));
        Milk.Type milk_Type0 = Milk.Type.SOY;
        Milk milk0 = new Milk(0, milk_Type0);
        recipe0.addIngredient(milk0);
        boolean boolean0 = recipe0.isReady();
        assertEquals((-1201.1), recipe0.getPrice(), 0.01);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
        Recipe recipe0 = new Recipe("Zlxg[.S(", 0, recipe_Size0, 0);
        Recipe recipe1 = new Recipe("Zlxg[.S(", 0, recipe_Size0, 0);
        boolean boolean0 = recipe1.equals(recipe0);
        assertEquals(0.0, recipe1.getPrice(), 0.01);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
        Recipe recipe0 = new Recipe((String) null, 3667.58, recipe_Size0, 1);
        assertFalse(recipe0.isReady());

        Water water0 = new Water();
        recipe0.addIngredient(water0);
        recipe0.addIngredient(water0);
        assertTrue(recipe0.isReady());
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
        Recipe recipe0 = new Recipe("u[FUn", 1237.600838415792, recipe_Size0, 270);
        Coffee coffee0 = new Coffee();
        Milk milk0 = new Milk();
        recipe0.addIngredient(milk0);
        recipe0.addIngredient(coffee0);
        assertEquals(1237.600838415792, recipe0.getPrice(), 0.01);
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.SMALL;
        Recipe recipe0 = new Recipe("", 0.0, recipe_Size0, 0);
        Coffee coffee0 = new Coffee();
        try {
            recipe0.addIngredient(coffee0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("uk.ac.sheffield.com1003.cafe.Recipe", e);
        }
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
        Recipe recipe0 = new Recipe("u[FUn", 1237.600838415792, recipe_Size0, 270);
        double double0 = recipe0.getPrice();
        assertEquals(1237.600838415792, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test19() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
        Recipe recipe0 = new Recipe((String) null, 3667.58, recipe_Size0, 1);
        recipe0.hashCode();
        assertEquals(3667.58, recipe0.getPrice(), 0.01);
        assertFalse(recipe0.isReady());
    }

    @Test(timeout = 4000)
    public void test20() throws Throwable {
        Recipe recipe0 = new Recipe("B:v4BC+G", 0.0);
        recipe0.getName();
        assertEquals(0.0, recipe0.getPrice(), 0.01);
    }
}
