/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 09 15:30:29 GMT 2024
 */

package uk.ac.sheffield.com1003.cafe;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.runner.RunWith;
import uk.ac.sheffield.com1003.cafe.Cafe;
import uk.ac.sheffield.com1003.cafe.Order;
import uk.ac.sheffield.com1003.cafe.Recipe;

public class Cafe_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Cafe cafe0 = new Cafe();
      Recipe recipe0 = new Recipe(";i&RI", 7);
      boolean boolean0 = cafe0.addRecipe(recipe0);
      boolean boolean1 = cafe0.placeOrder(";i&RI", "h1%B>RdM+n", 2744);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Cafe cafe0 = new Cafe("Pending Orders:");
      assertEquals("Pending Orders:", cafe0.getName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Cafe cafe0 = new Cafe((String) null, 0, 0);
      String string0 = cafe0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Cafe cafe0 = new Cafe();
      String string0 = cafe0.getName();
      assertEquals("Cafe", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Cafe cafe0 = new Cafe();
      Recipe recipe0 = new Recipe((String) null, 2265.0026);
      cafe0.addRecipe(recipe0);
      // Undeclared exception!
      try { 
        cafe0.removeRecipe((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Cafe cafe0 = new Cafe((String) null, 5064, 5064);
      cafe0.printMenu();
      // Undeclared exception!
      cafe0.printMenu();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Cafe cafe0 = new Cafe();
      Recipe recipe0 = new Recipe((String) null, (-702.3644919138));
      cafe0.addRecipe(recipe0);
      // Undeclared exception!
      try { 
        cafe0.placeOrder((String) null, (String) null, (-702.3644919138));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Cafe cafe0 = null;
      try {
        cafe0 = new Cafe((String) null, (-897), (-897));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sheffield.com1003.cafe.Cafe", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Cafe cafe0 = new Cafe("", 0, 0);
      String string0 = cafe0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Cafe cafe0 = new Cafe();
      Recipe recipe0 = new Recipe("KM?[i^", (-3997.14753));
      cafe0.addRecipe(recipe0);
      cafe0.placeOrder("KM?[i^", "KM?[i^", (-1.0));
      Order order0 = cafe0.serveOrder();
      assertNotNull(order0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Cafe cafe0 = new Cafe((String) null, 0, 0);
      Order order0 = cafe0.serveOrder();
      assertNull(order0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Cafe cafe0 = new Cafe();
      Order order0 = cafe0.serveOrder();
      assertNull(order0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Cafe cafe0 = new Cafe();
      Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
      Recipe recipe0 = new Recipe("==========", (-1.0), recipe_Size0, 10);
      cafe0.addRecipe(recipe0);
      try { 
        cafe0.placeOrder("uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException", (String) null, (-1.0));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sheffield.com1003.cafe.Cafe", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Cafe cafe0 = new Cafe();
      Recipe recipe0 = new Recipe("KM?[i^", 2719);
      boolean boolean0 = cafe0.addRecipe(recipe0);
      boolean boolean1 = cafe0.placeOrder("KM?[i^", "KM?[i^", (-1.0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Cafe cafe0 = new Cafe((String) null, 0, 0);
      try { 
        cafe0.placeOrder((String) null, (String) null, 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sheffield.com1003.cafe.Cafe", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Cafe cafe0 = new Cafe();
      Recipe recipe0 = new Recipe("KM?[i^", 2719);
      cafe0.addRecipe(recipe0);
      cafe0.printMenu();
      assertEquals("Cafe", cafe0.getName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Cafe cafe0 = new Cafe();
      Recipe recipe0 = new Recipe("^", 1722.975);
      cafe0.addRecipe(recipe0);
      cafe0.placeOrder("^", "^", 1722.975);
      cafe0.printPendingOrders();
      assertEquals("Cafe", cafe0.getName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Cafe cafe0 = new Cafe((String) null, 0, 0);
      cafe0.printPendingOrders();
      assertNull(cafe0.getName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Cafe cafe0 = new Cafe();
      Recipe recipe0 = new Recipe("dQ=S*?5", 181.16113328452);
      cafe0.addRecipe(recipe0);
      // Undeclared exception!
      try { 
        cafe0.getMenu();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("uk.ac.sheffield.com1003.cafe.Cafe", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Cafe cafe0 = new Cafe();
      Recipe[] recipeArray0 = cafe0.getMenu();
      assertEquals(0, recipeArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Cafe cafe0 = new Cafe();
      Recipe recipe0 = new Recipe(" v6", 148.445609411);
      cafe0.addRecipe(recipe0);
      try { 
        cafe0.removeRecipe("|%");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sheffield.com1003.cafe.Cafe", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Cafe cafe0 = new Cafe();
      Recipe recipe0 = new Recipe("F", 821.754);
      cafe0.addRecipe(recipe0);
      cafe0.removeRecipe("F");
      // Undeclared exception!
      try { 
        cafe0.getMenu();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sheffield.com1003.cafe.Cafe", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Cafe cafe0 = new Cafe();
      Recipe recipe0 = new Recipe("kvD{D", (-976.920602));
      cafe0.addRecipe(recipe0);
      boolean boolean0 = cafe0.addRecipe(recipe0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Cafe cafe0 = new Cafe("Welcome to Cafe", 0, 91);
      Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
      Recipe recipe0 = new Recipe(";zJ", 0, recipe_Size0, 2008);
      boolean boolean0 = cafe0.addRecipe(recipe0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Cafe cafe0 = new Cafe();
      String string0 = cafe0.greeting();
      assertEquals("Welcome to Cafe", string0);
  }
}
