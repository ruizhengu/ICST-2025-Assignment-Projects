/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 09 15:23:50 GMT 2024
 */

package uk.ac.sheffield.com1003.cafe;

import org.junit.Test;

import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.runner.RunWith;
import uk.ac.sheffield.com1003.cafe.Recipe;
import uk.ac.sheffield.com1003.cafe.ingredients.Coffee;
import uk.ac.sheffield.com1003.cafe.ingredients.Water;

public class Recipe_ESTest {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Recipe recipe0 = new Recipe("", (-1466.816517222));
        Recipe recipe1 = new Recipe("", 1707.8013989153635);
        boolean boolean0 = recipe0.equals(recipe1);
        assertEquals(1707.8013989153635, recipe1.getPrice(), 0.01);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        Recipe recipe0 = new Recipe("V/+|2V?MZYjO", 1984.910272428576);
        double double0 = recipe0.getPrice();
        assertEquals(1984.910272428576, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        Recipe recipe0 = new Recipe(", amount=", (-221.53593889));
        double double0 = recipe0.getPrice();
        assertEquals((-221.53593889), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.SMALL;
        Recipe recipe0 = new Recipe((String) null, 149.62069469, recipe_Size0, 3);
        recipe0.getName();
        assertEquals(149.62069469, recipe0.getPrice(), 0.01);
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
        Recipe recipe0 = new Recipe("", (-1.0), recipe_Size0, 789);
        recipe0.getName();
        assertEquals((-1.0), recipe0.getPrice(), 0.01);
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
        Recipe recipe0 = null;
        try {
            recipe0 = new Recipe("tUNV^u\"x_,41{KG", (-34), recipe_Size0, (-34));
            fail("Expecting exception: NegativeArraySizeException");

        } catch (NegativeArraySizeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("uk.ac.sheffield.com1003.cafe.Recipe", e);
        }
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
        Recipe recipe0 = new Recipe("Water", 0, recipe_Size0, 0);
        boolean boolean0 = recipe0.isReady();
        assertEquals(0.0, recipe0.getPrice(), 0.01);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        Recipe recipe0 = new Recipe("", (-1466.816517222));
        Recipe recipe1 = new Recipe("", (-1466.816517222));
        assertFalse(recipe1.isReady());

        boolean boolean0 = recipe0.equals(recipe1);
        assertFalse(boolean0);
        assertEquals((-1466.816517222), recipe1.getPrice(), 0.01);
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.SMALL;
        Recipe recipe0 = new Recipe("uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException", 20, recipe_Size0, 20);
        Recipe recipe1 = new Recipe("uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException", 20);
        boolean boolean0 = recipe0.equals(recipe1);
        assertEquals(20.0, recipe1.getPrice(), 0.01);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        Recipe recipe0 = new Recipe("V/+|2V?MZYjO", 1984.910272428576);
        Recipe recipe1 = new Recipe("6&(w", 0);
        boolean boolean0 = recipe0.equals(recipe1);
        assertEquals(0.0, recipe1.getPrice(), 0.01);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        Recipe recipe0 = new Recipe("uk.ac.sheffield.com1003.cafe.Recipe$Size", 0.0);
        boolean boolean0 = recipe0.equals("LARGE");
        assertEquals(0.0, recipe0.getPrice(), 0.01);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Recipe recipe0 = new Recipe("", (-2034.9353460611194));
        boolean boolean0 = recipe0.equals(recipe0);
        assertTrue(boolean0);
        assertEquals((-2034.9353460611194), recipe0.getPrice(), 0.01);
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
        Recipe recipe0 = new Recipe("", (-1.0), recipe_Size0, 789);
        Water water0 = new Water(789);
        recipe0.addIngredient(water0);
        boolean boolean0 = recipe0.isReady();
        assertEquals((-1.0), recipe0.getPrice(), 0.01);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
        Recipe recipe0 = new Recipe("c{r/0", 0, recipe_Size0, 0);
        Recipe recipe1 = new Recipe("c{r/0", 0);
        boolean boolean0 = recipe0.equals(recipe1);
        assertEquals(0.0, recipe1.getPrice(), 0.01);
        assertFalse(boolean0);
        assertFalse(recipe1.isReady());
        assertTrue(recipe0.isReady());
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
        Recipe recipe0 = new Recipe("c{r/0", 0, recipe_Size0, 0);
        Recipe recipe1 = new Recipe("f", 0, recipe_Size0, 0);
        boolean boolean0 = recipe0.equals(recipe1);
        assertTrue(boolean0);
        assertEquals(0.0, recipe1.getPrice(), 0.01);
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        Recipe recipe0 = new Recipe("V/+|2V?MZYjO", 1984.910272428576);
        Coffee coffee0 = new Coffee();
        recipe0.addIngredient(coffee0);
        Coffee coffee1 = new Coffee(100);
        recipe0.addIngredient(coffee1);
        assertEquals(1984.910272428576, recipe0.getPrice(), 0.01);
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        Recipe recipe0 = new Recipe("V/+|2V?MZYjO", 1984.910272428576);
        Coffee coffee0 = new Coffee();
        recipe0.addIngredient(coffee0);
        recipe0.addIngredient(coffee0);
        assertEquals(1984.910272428576, recipe0.getPrice(), 0.01);
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
        Recipe recipe0 = new Recipe("c{r/0", 0, recipe_Size0, 0);
        Water water0 = new Water();
        try {
            recipe0.addIngredient(water0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("uk.ac.sheffield.com1003.cafe.Recipe", e);
        }
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        Recipe recipe0 = new Recipe("uk.ac.sheffield.com1003.cafe.Recipe$Size", 0.0);
        double double0 = recipe0.getPrice();
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test19() throws Throwable {
        Recipe recipe0 = new Recipe("uk.ac.sheffield.com1003.cafe.Recipe$Size", 0.0);
        recipe0.hashCode();
        assertEquals(0.0, recipe0.getPrice(), 0.01);
    }

    @Test(timeout = 4000)
    public void test20() throws Throwable {
        Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
        Recipe recipe0 = new Recipe("c{r/0", 0, recipe_Size0, 0);
        recipe0.getName();
        assertEquals(0.0, recipe0.getPrice(), 0.01);
        assertTrue(recipe0.isReady());
    }
}
