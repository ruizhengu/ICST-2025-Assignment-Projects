/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 07 11:38:29 GMT 2024
 */

package uk.ac.sheffield.com1003.cafe.ingredients;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sheffield.com1003.cafe.ingredients.Coffee;
import uk.ac.sheffield.com1003.cafe.ingredients.Unit;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Coffee_ESTest extends Coffee_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Coffee coffee0 = new Coffee((-696));
      coffee0.name = "ML";
      coffee0.name = "Coffee [unit=UNDEFINED, amount=-696, decaf=false]";
      Coffee coffee1 = new Coffee();
      assertEquals("Coffee", coffee1.getName());
      
      coffee1.name = "Coffee [unit=UNDEFINED, amount=-696, decaf=false]";
      boolean boolean0 = coffee0.equals(coffee1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Coffee coffee0 = new Coffee();
      coffee0.name = null;
      // Undeclared exception!
      try { 
        coffee0.equals(coffee0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Coffee coffee0 = new Coffee(9);
      Coffee coffee1 = new Coffee(9, true);
      boolean boolean0 = coffee0.equals(coffee1);
      assertEquals("Coffee", coffee1.getName());
      assertFalse(boolean0);
      assertEquals(9, coffee1.getAmount());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Coffee coffee0 = new Coffee();
      Coffee coffee1 = new Coffee();
      assertTrue(coffee1.equals((Object)coffee0));
      
      Unit unit0 = Unit.UNDEFINED;
      coffee1.unit = unit0;
      boolean boolean0 = coffee0.equals(coffee1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Coffee coffee0 = new Coffee();
      Coffee coffee1 = new Coffee((-1));
      boolean boolean0 = coffee0.equals(coffee1);
      assertEquals((-1), coffee1.getAmount());
      assertEquals("Coffee", coffee1.getName());
      assertFalse(boolean0);
      assertFalse(coffee1.equals((Object)coffee0));
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Coffee coffee0 = new Coffee();
      Coffee coffee1 = new Coffee();
      assertEquals("Coffee", coffee1.getName());
      
      coffee1.name = "+&&mH.a9*NGz%U|O4";
      boolean boolean0 = coffee0.equals(coffee1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Coffee coffee0 = new Coffee();
      boolean boolean0 = coffee0.equals(coffee0);
      assertTrue(boolean0);
      assertEquals("Coffee", coffee0.getName());
      assertEquals(8, coffee0.getAmount());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Coffee coffee0 = new Coffee();
      Object object0 = new Object();
      boolean boolean0 = coffee0.equals(object0);
      assertEquals(8, coffee0.getAmount());
      assertFalse(boolean0);
      assertEquals("Coffee", coffee0.getName());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Coffee coffee0 = new Coffee((-696));
      boolean boolean0 = coffee0.equals((Object) null);
      assertEquals("Coffee", coffee0.getName());
      assertFalse(boolean0);
      assertEquals((-696), coffee0.getAmount());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Coffee coffee0 = new Coffee();
      String string0 = coffee0.toString();
      assertEquals("Coffee [unit=GR, amount=8, decaf=false]", string0);
      assertEquals("Coffee", coffee0.getName());
  }
}
