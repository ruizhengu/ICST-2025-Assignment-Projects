/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 07 15:37:53 GMT 2024
 */

package uk.ac.sheffield.com1003.cafe;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.runner.RunWith;
import uk.ac.sheffield.com1003.cafe.Recipe;
import uk.ac.sheffield.com1003.cafe.ingredients.Coffee;
import uk.ac.sheffield.com1003.cafe.ingredients.Milk;
import uk.ac.sheffield.com1003.cafe.ingredients.Syrup;
import uk.ac.sheffield.com1003.cafe.ingredients.Water;

//@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Recipe_ESTest {

//  @org.junit.Rule
//  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
//
//  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone();
//
//  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
//
//
//  @BeforeClass
//  public static void initEvoSuiteFramework() {
//    org.evosuite.runtime.RuntimeSettings.className = "uk.ac.sheffield.com1003.cafe.Recipe";
//    org.evosuite.runtime.GuiSupport.initialize();
//    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100;
//    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000;
//    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true;
//    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED;
//    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT();
//    org.evosuite.runtime.classhandling.JDKClassResetter.init();
//    setSystemProperties();
//    initializeClasses();
//    org.evosuite.runtime.Runtime.getInstance().resetRuntime();
//  }
//
//  @AfterClass
//  public static void clearEvoSuiteFramework(){
//    Sandbox.resetDefaultSecurityManager();
//    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone());
//  }
//
//  @Before
//  public void initTestCase(){
//    threadStopper.storeCurrentThreads();
//    threadStopper.startRecordingTime();
//    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler();
//    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode();
//    setSystemProperties();
//    org.evosuite.runtime.GuiSupport.setHeadless();
//    org.evosuite.runtime.Runtime.getInstance().resetRuntime();
//    org.evosuite.runtime.agent.InstrumentingAgent.activate();
//  }
//
//  @After
//  public void doneWithTestCase(){
//    threadStopper.killAndJoinClientThreads();
//    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks();
//    org.evosuite.runtime.classhandling.JDKClassResetter.reset();
//    resetClasses();
//    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode();
//    org.evosuite.runtime.agent.InstrumentingAgent.deactivate();
//    org.evosuite.runtime.GuiSupport.restoreHeadlessMode();
//  }
//
//  public static void setSystemProperties() {
//
//    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone());
//    java.lang.System.setProperty("user.dir", "/Users/ruizhengu/Experiments/model_solution_evosuite");
//    java.lang.System.setProperty("java.io.tmpdir", "/var/folders/1r/t1t8tcs944979hxkq3w8p1b40000gn/T/");
//  }
//
//  private static void initializeClasses() {
//    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Recipe_ESTest.class.getClassLoader() ,
//      "uk.ac.sheffield.com1003.cafe.ingredients.Ingredient",
//      "uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException",
//      "uk.ac.sheffield.com1003.cafe.ingredients.Milk",
//      "uk.ac.sheffield.com1003.cafe.ingredients.Milk$Type",
//      "uk.ac.sheffield.com1003.cafe.Recipe$Size",
//      "uk.ac.sheffield.com1003.cafe.Recipe",
//      "uk.ac.sheffield.com1003.cafe.ingredients.Water",
//      "uk.ac.sheffield.com1003.cafe.ingredients.Unit",
//      "uk.ac.sheffield.com1003.cafe.ingredients.Syrup",
//      "uk.ac.sheffield.com1003.cafe.ingredients.Coffee"
//    );
//  }
//
//  private static void resetClasses() {
//    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Recipe_ESTest.class.getClassLoader());
//
//    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
//      "uk.ac.sheffield.com1003.cafe.Recipe",
//      "uk.ac.sheffield.com1003.cafe.Recipe$Size",
//      "uk.ac.sheffield.com1003.cafe.ingredients.Ingredient",
//      "uk.ac.sheffield.com1003.cafe.ingredients.Coffee",
//      "uk.ac.sheffield.com1003.cafe.ingredients.Unit",
//      "uk.ac.sheffield.com1003.cafe.ingredients.Milk",
//      "uk.ac.sheffield.com1003.cafe.ingredients.Milk$Type",
//      "uk.ac.sheffield.com1003.cafe.ingredients.Syrup",
//      "uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException",
//      "uk.ac.sheffield.com1003.cafe.ingredients.Water"
//    );
//  }

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Recipe recipe0 = new Recipe("Lcv0U+XL%S)0", (-1.0));
      Recipe recipe1 = new Recipe("Lcv0U+XL%S)0", (-1396.3026088721));
      boolean boolean0 = recipe0.equals(recipe1);
      assertFalse(boolean0);
      assertEquals((-1396.3026088721), recipe1.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.SMALL;
      Recipe recipe0 = new Recipe("j", 0.0, recipe_Size0, 0);
      double double0 = recipe0.getPrice();
      assertTrue(recipe0.isReady());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Recipe recipe0 = new Recipe(";\u0002>~P:[92x~_{", 1.0);
      double double0 = recipe0.getPrice();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Recipe recipe0 = new Recipe((String) null, 209.6147480207887);
      recipe0.getName();
      assertEquals(209.6147480207887, recipe0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.SMALL;
      Recipe recipe0 = new Recipe("yS", 0, recipe_Size0, 0);
      recipe0.getName();
      assertEquals(0.0, recipe0.getPrice(), 0.01);
      assertTrue(recipe0.isReady());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.SMALL;
      Recipe recipe0 = null;
      try {
        recipe0 = new Recipe("uk.ac.sheffield.com1003.cafe.ingredients.Water", (-12), recipe_Size0, (-12));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sheffield.com1003.cafe.Recipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Water water0 = new Water();
      Recipe recipe0 = new Recipe("V&eXWqxu-ofhoXW01", (-1.0));
      recipe0.addIngredient(water0);
      recipe0.isReady();
      assertEquals((-1.0), recipe0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.SMALL;
      Recipe recipe0 = new Recipe("fr2>x:", 0, recipe_Size0, 0);
      Recipe recipe1 = new Recipe("fr2>x:", 0, recipe_Size0, 0);
      boolean boolean0 = recipe1.equals(recipe0);
      assertTrue(boolean0);
      assertEquals(0.0, recipe1.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe0 = new Recipe("| uE_<H:|Oa5", (-1.0), recipe_Size0, 0);
      Recipe recipe1 = new Recipe("", (-1.0));
      boolean boolean0 = recipe0.equals(recipe1);
      assertFalse(boolean0);
      assertEquals((-1.0), recipe1.getPrice(), 0.01);
      assertTrue(recipe0.isReady());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
      Recipe recipe0 = new Recipe("", 0.0, recipe_Size0, 0);
      Recipe recipe1 = new Recipe("", 0);
      boolean boolean0 = recipe0.equals(recipe1);
      assertTrue(recipe0.isReady());
      assertEquals(0.0, recipe1.getPrice(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe0 = new Recipe("| uE_<H:|Oa5", (-1.0), recipe_Size0, 0);
      Recipe recipe1 = new Recipe("A.\n=0Ak' a@=", 0, recipe_Size0, 0);
      boolean boolean0 = recipe0.equals(recipe1);
      assertEquals(0.0, recipe1.getPrice(), 0.01);
      assertTrue(recipe1.isReady());
      assertFalse(recipe1.equals((Object)recipe0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Recipe recipe0 = new Recipe("", 1.0);
      Syrup syrup0 = new Syrup("");
      boolean boolean0 = recipe0.equals(syrup0);
      assertEquals(1.0, recipe0.getPrice(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe0 = new Recipe("| uE_<H:|Oa5", (-1.0), recipe_Size0, 0);
      boolean boolean0 = recipe0.equals(recipe0);
      assertTrue(boolean0);
      assertTrue(recipe0.isReady());
      assertEquals((-1.0), recipe0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Recipe recipe0 = new Recipe("", 1.0);
      Recipe recipe1 = new Recipe("", 1.0);
      assertFalse(recipe1.isReady());
      
      boolean boolean0 = recipe0.equals(recipe1);
      assertEquals(1.0, recipe1.getPrice(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe0 = new Recipe("| uE_<H:|Oa5", (-1.0), recipe_Size0, 0);
      boolean boolean0 = recipe0.isReady();
      assertEquals((-1.0), recipe0.getPrice(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe0 = new Recipe("]", 3570.62, recipe_Size0, 3);
      Coffee coffee0 = new Coffee(0, false);
      recipe0.addIngredient(coffee0);
      Milk milk0 = new Milk();
      recipe0.addIngredient(milk0);
      assertEquals(3570.62, recipe0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe0 = new Recipe("]", 3570.62, recipe_Size0, 3);
      Coffee coffee0 = new Coffee(0, false);
      recipe0.addIngredient(coffee0);
      recipe0.addIngredient(coffee0);
      assertEquals(3570.62, recipe0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe0 = new Recipe("| uE_<H:|Oa5", (-1.0), recipe_Size0, 0);
      Coffee coffee0 = new Coffee(0);
      try { 
        recipe0.addIngredient(coffee0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sheffield.com1003.cafe.Recipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe0 = new Recipe("| uE_<H:|Oa5", (-1.0), recipe_Size0, 0);
      double double0 = recipe0.getPrice();
      assertTrue(recipe0.isReady());
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe0 = new Recipe("| uE_<H:|Oa5", (-1.0), recipe_Size0, 0);
      recipe0.hashCode();
      assertTrue(recipe0.isReady());
      assertEquals((-1.0), recipe0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Recipe recipe0 = new Recipe("", 1.0);
      recipe0.getName();
      assertEquals(1.0, recipe0.getPrice(), 0.01);
  }
}
