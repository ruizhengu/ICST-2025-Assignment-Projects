/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 07 11:35:16 GMT 2024
 */

package uk.ac.sheffield.com1003.cafe;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sheffield.com1003.cafe.Recipe;
import uk.ac.sheffield.com1003.cafe.ingredients.Coffee;
import uk.ac.sheffield.com1003.cafe.ingredients.Milk;
import uk.ac.sheffield.com1003.cafe.ingredients.Water;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Recipe_ESTest extends Recipe_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Recipe recipe0 = new Recipe("REGULAR", 0.0);
      Recipe recipe1 = new Recipe((String) null, (-1.0));
      boolean boolean0 = recipe0.equals(recipe1);
      assertFalse(boolean0);
      assertEquals((-1.0), recipe1.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
      Recipe recipe0 = new Recipe("Coffee", 1.0, recipe_Size0, 0);
      double double0 = recipe0.getPrice();
      assertTrue(recipe0.isReady());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Recipe recipe0 = new Recipe("", (-2669.21679235008));
      double double0 = recipe0.getPrice();
      assertEquals((-2669.21679235008), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Recipe recipe0 = new Recipe((String) null, (-395.39586954583));
      recipe0.getName();
      assertEquals((-395.39586954583), recipe0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Recipe recipe0 = new Recipe("", (-2669.21679235008));
      recipe0.getName();
      assertEquals((-2669.21679235008), recipe0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe0 = null;
      try {
        recipe0 = new Recipe("", (-46), recipe_Size0, (-46));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sheffield.com1003.cafe.Recipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Recipe recipe0 = new Recipe("q<]E !2GO_Y~QZ3", (-1085.803082430747));
      Water water0 = new Water();
      recipe0.addIngredient(water0);
      boolean boolean0 = recipe0.isReady();
      assertEquals((-1085.803082430747), recipe0.getPrice(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
      Recipe recipe0 = new Recipe(",~M$\"%3qCA6!aAnFBa<", 1.0, recipe_Size0, 0);
      boolean boolean0 = recipe0.isReady();
      assertTrue(boolean0);
      assertEquals(1.0, recipe0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe0 = new Recipe("H|@tTpk{W5qxKp1dqZ`", 0, recipe_Size0, 0);
      Recipe recipe1 = new Recipe("H|@tTpk{W5qxKp1dqZ`", 0, recipe_Size0, 2);
      boolean boolean0 = recipe0.equals(recipe1);
      assertFalse(recipe1.isReady());
      assertFalse(boolean0);
      assertTrue(recipe0.isReady());
      assertEquals(0.0, recipe1.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.SMALL;
      Recipe recipe0 = new Recipe("Water [unitd", 15, recipe_Size0, 15);
      Recipe recipe1 = new Recipe("Water [unitd", 15);
      boolean boolean0 = recipe1.equals(recipe0);
      assertEquals(15.0, recipe1.getPrice(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Recipe recipe0 = new Recipe("?^#YD", 207.53561349781);
      Recipe recipe1 = new Recipe("LARGE", 0);
      boolean boolean0 = recipe1.equals(recipe0);
      assertEquals(0.0, recipe1.getPrice(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Recipe recipe0 = new Recipe("?^#YD", 207.53561349781);
      boolean boolean0 = recipe0.equals("Coffee [unit=GR, amount=0, decaf=true]");
      assertEquals(207.53561349781, recipe0.getPrice(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Recipe recipe0 = new Recipe("F*:DsEWlkA`5@fT", 0);
      boolean boolean0 = recipe0.equals(recipe0);
      assertTrue(boolean0);
      assertEquals(0.0, recipe0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Recipe recipe0 = new Recipe("REGULAR", 0.0);
      Milk milk0 = new Milk(645);
      recipe0.addIngredient(milk0);
      Recipe recipe1 = new Recipe("REGULAR", 0.0);
      boolean boolean0 = recipe0.equals(recipe1);
      assertFalse(recipe0.isReady());
      assertEquals(0.0, recipe1.getPrice(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.SMALL;
      Recipe recipe0 = new Recipe("", 0, recipe_Size0, 0);
      Recipe recipe1 = new Recipe("", 0, recipe_Size0, 0);
      boolean boolean0 = recipe1.equals(recipe0);
      assertEquals(0.0, recipe1.getPrice(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Recipe recipe0 = new Recipe("?^#YD", 207.53561349781);
      Coffee coffee0 = new Coffee(0, true);
      recipe0.addIngredient(coffee0);
      Milk.Type milk_Type0 = Milk.Type.SEMI;
      Milk milk0 = new Milk(0, milk_Type0);
      recipe0.addIngredient(milk0);
      assertEquals(207.53561349781, recipe0.getPrice(), 0.01);
      assertFalse(recipe0.isReady());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Recipe recipe0 = new Recipe("REGULAR", 0.0);
      Milk milk0 = new Milk(645);
      recipe0.addIngredient(milk0);
      recipe0.addIngredient(milk0);
      assertEquals(0.0, recipe0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe0 = new Recipe("H|@tTk{W5qxKp1dqZ`", 0, recipe_Size0, 0);
      Milk milk0 = new Milk();
      try { 
        recipe0.addIngredient(milk0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sheffield.com1003.cafe.Recipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Recipe recipe0 = new Recipe("REGULAR", 0.0);
      double double0 = recipe0.getPrice();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Recipe recipe0 = new Recipe("REGULAR", 0.0);
      recipe0.hashCode();
      assertEquals(0.0, recipe0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Recipe recipe0 = new Recipe("REGULAR", 0.0);
      recipe0.getName();
      assertEquals(0.0, recipe0.getPrice(), 0.01);
  }
}
