/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 04 16:44:30 GMT 2024
 */

package uk.ac.sheffield.com1003.cafe.ingredients;

import org.junit.Test;
import static org.junit.Assert.*;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Milk_ESTest extends Milk_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Milk milk0 = new Milk(0);
      Milk.Type milk_Type0 = Milk.Type.ALMOND;
      Milk milk1 = new Milk((-2618), milk_Type0);
      boolean boolean0 = milk1.equalsSolution(milk0);
      assertFalse(boolean0);
      assertEquals((-2618), milk1.getAmount());
      assertEquals("Milk", milk1.getName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Milk.Type milk_Type0 = Milk.Type.SEMI;
      Milk milk0 = new Milk(270, milk_Type0);
      Milk milk1 = new Milk((-1795830150), milk_Type0);
      boolean boolean0 = milk0.equals(milk1);
      assertEquals((-1795830150), milk1.getAmount());
      assertFalse(milk1.equals((Object)milk0));
      assertEquals("Milk", milk1.getName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Milk milk0 = new Milk();
      milk0.name = null;
      // Undeclared exception!
      try { 
        milk0.equalsSolution(milk0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Milk milk0 = new Milk();
      milk0.name = null;
      // Undeclared exception!
      try { 
        milk0.equals(milk0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Milk.Type milk_Type0 = Milk.Type.ALMOND;
      Milk milk0 = new Milk((-2618), milk_Type0);
      Milk milk1 = new Milk(0);
      assertEquals(0, milk1.getAmount());
      
      milk1.amount = (-2618);
      boolean boolean0 = milk0.equalsSolution(milk1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Milk milk0 = new Milk(0);
      Milk milk1 = new Milk(0);
      Unit unit0 = Unit.GR;
      milk1.unit = unit0;
      boolean boolean0 = milk0.equalsSolution(milk1);
      assertEquals("Milk", milk1.getName());
      assertFalse(boolean0);
      assertEquals(0, milk1.getAmount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Milk milk0 = new Milk(0);
      Milk.Type milk_Type0 = Milk.Type.ALMOND;
      Milk milk1 = new Milk((-2618), milk_Type0);
      boolean boolean0 = milk0.equalsSolution(milk1);
      assertFalse(boolean0);
      assertEquals((-2618), milk1.getAmount());
      assertEquals("Milk", milk1.getName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Milk milk0 = new Milk((-43));
      assertEquals("Milk", milk0.getName());
      
      milk0.name = "uk.ac.sheffield.com1003.cafe.ingredients.Ingredient";
      Milk milk1 = new Milk((-43));
      boolean boolean0 = milk1.equalsSolution(milk0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Milk milk0 = new Milk(0);
      boolean boolean0 = milk0.equalsSolution(milk0.unit);
      assertEquals("Milk", milk0.getName());
      assertEquals(0, milk0.getAmount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Milk milk0 = new Milk(0);
      boolean boolean0 = milk0.equalsSolution(milk0);
      assertEquals("Milk", milk0.getName());
      assertTrue(boolean0);
      assertEquals(0, milk0.getAmount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Milk.Type milk_Type0 = Milk.Type.SEMI;
      Milk milk0 = new Milk(270, milk_Type0);
      boolean boolean0 = milk0.equalsSolution((Object) null);
      assertEquals(270, milk0.getAmount());
      assertEquals("Milk", milk0.getName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Milk milk0 = new Milk(0);
      Milk.Type milk_Type0 = Milk.Type.ALMOND;
      Milk milk1 = new Milk(0, milk_Type0);
      boolean boolean0 = milk0.equals(milk1);
      assertFalse(boolean0);
      assertEquals(0, milk1.getAmount());
      assertEquals("Milk", milk1.getName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Milk milk0 = new Milk();
      Unit unit0 = Unit.GR;
      milk0.unit = unit0;
      Milk milk1 = new Milk();
      boolean boolean0 = milk0.equals(milk1);
      assertEquals(100, milk1.getAmount());
      assertEquals("Milk", milk1.getName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Milk milk0 = new Milk(0);
      Milk.Type milk_Type0 = Milk.Type.ALMOND;
      Milk milk1 = new Milk((-2618), milk_Type0);
      boolean boolean0 = milk1.equals(milk0);
      assertFalse(boolean0);
      assertEquals("Milk", milk1.getName());
      assertEquals((-2618), milk1.getAmount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Milk milk0 = new Milk(0);
      boolean boolean0 = milk0.equals(milk0.unit);
      assertEquals(0, milk0.getAmount());
      assertFalse(boolean0);
      assertEquals("Milk", milk0.getName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Milk milk0 = new Milk(0);
      boolean boolean0 = milk0.equals(milk0);
      assertEquals("Milk", milk0.getName());
      assertEquals(0, milk0.getAmount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Milk milk0 = new Milk(0);
      boolean boolean0 = milk0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0, milk0.getAmount());
      assertEquals("Milk", milk0.getName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Milk milk0 = new Milk();
      Milk milk1 = new Milk();
      assertEquals("Milk", milk1.getName());
      
      milk1.name = "TOJY>vo:#[wV&U";
      boolean boolean0 = milk0.equals(milk1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Milk milk0 = new Milk(0);
      String string0 = milk0.toString();
      assertEquals("Milk", milk0.getName());
      assertEquals("Milk [unit=ML, amount=0, type=WHOLE]", string0);
  }
}
